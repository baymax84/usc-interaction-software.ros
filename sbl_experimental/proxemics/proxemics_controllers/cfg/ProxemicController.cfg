#! /usr/bin/env python
PACKAGE = 'proxemics_controllers'
import roslib;roslib.load_manifest(PACKAGE)

from math import pi
from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()
#frames = gen.add_group("Frames")
#gains = gen.add_group("Gains")
#speeds = gen.add_group("Speeds")

gen.add("social_distance", double_t, 0, "The desired social interagent distance.", 1.0, 0.0, 10.0)

gen.add("origin_frame", str_t, 0, "The origin (base) frame from which interagent distance will be calculated.", "/base_link")
gen.add("target_frame", str_t, 0, "The target frame to which interagent distance will be calculated.", "/target")

gen.add("use_orientation", bool_t, 0, "Select whether or not to use target frame orientation.", False)  

gen.add("gain_lin_x", double_t, 0, "The gain for interagent distance errors along the x axis.", 1.0, 0.0, 10.0)
gen.add("gain_lin_y", double_t, 0, "The gain for interagent distance errors along the y axis.", 1.0, 0.0, 10.0)
gen.add("gain_ang_z", double_t, 0, "The gain for interagent orientation errors about the z axis.", 2.0, 0.0, 10.0)

gen.add("min_speed_lin_x", double_t, 0, "The minimum linear speed along the x axis.", 0.0, 0.0, 2.0)
gen.add("min_speed_lin_y", double_t, 0, "The minimum linear speed along the y axis.", 0.0, 0.0, 2.0)
gen.add("min_speed_ang_z", double_t, 0, "The minimum angular speed about the z axis.", 0.0, 0.0, pi)

gen.add("max_speed_lin_x", double_t, 0, "The maximum linear speed along the x axis.", 1.0, 0.0, 2.0)
gen.add("max_speed_lin_y", double_t, 0, "The maximum linear speed along the y axis.", 1.0, 0.0, 2.0)
gen.add("max_speed_ang_z", double_t, 0, "The maximum angular speed about the z axis.", pi/2, 0.0, pi)

exit(gen.generate(PACKAGE, "proxemics_controllers", "ProxemicController"))
