/* Auto-generated by genmsg_cpp for file /home/prashanth/groovy_workspace/sandbox/bandit_test/srv/GetJointProperties.srv */
#ifndef BANDIT_TEST_SERVICE_GETJOINTPROPERTIES_H
#define BANDIT_TEST_SERVICE_GETJOINTPROPERTIES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace bandit_test
{
template <class ContainerAllocator>
struct GetJointPropertiesRequest_ {
  typedef GetJointPropertiesRequest_<ContainerAllocator> Type;

  GetJointPropertiesRequest_()
  {
  }

  GetJointPropertiesRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::bandit_test::GetJointPropertiesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bandit_test::GetJointPropertiesRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetJointPropertiesRequest
typedef  ::bandit_test::GetJointPropertiesRequest_<std::allocator<void> > GetJointPropertiesRequest;

typedef boost::shared_ptr< ::bandit_test::GetJointPropertiesRequest> GetJointPropertiesRequestPtr;
typedef boost::shared_ptr< ::bandit_test::GetJointPropertiesRequest const> GetJointPropertiesRequestConstPtr;


template <class ContainerAllocator>
struct GetJointPropertiesResponse_ {
  typedef GetJointPropertiesResponse_<ContainerAllocator> Type;

  GetJointPropertiesResponse_()
  : name()
  , id()
  , min()
  , max()
  , pos()
  {
  }

  GetJointPropertiesResponse_(const ContainerAllocator& _alloc)
  : name(_alloc)
  , id(_alloc)
  , min(_alloc)
  , max(_alloc)
  , pos(_alloc)
  {
  }

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _name_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  name;

  typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _id_type;
  std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  id;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _min_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  min;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _max_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  max;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _pos_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  pos;


  typedef boost::shared_ptr< ::bandit_test::GetJointPropertiesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bandit_test::GetJointPropertiesResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetJointPropertiesResponse
typedef  ::bandit_test::GetJointPropertiesResponse_<std::allocator<void> > GetJointPropertiesResponse;

typedef boost::shared_ptr< ::bandit_test::GetJointPropertiesResponse> GetJointPropertiesResponsePtr;
typedef boost::shared_ptr< ::bandit_test::GetJointPropertiesResponse const> GetJointPropertiesResponseConstPtr;

struct GetJointProperties
{

typedef GetJointPropertiesRequest Request;
typedef GetJointPropertiesResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetJointProperties
} // namespace bandit_test

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::bandit_test::GetJointPropertiesRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::bandit_test::GetJointPropertiesRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::bandit_test::GetJointPropertiesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::bandit_test::GetJointPropertiesRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::bandit_test::GetJointPropertiesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bandit_test/GetJointPropertiesRequest";
  }

  static const char* value(const  ::bandit_test::GetJointPropertiesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::bandit_test::GetJointPropertiesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::bandit_test::GetJointPropertiesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::bandit_test::GetJointPropertiesRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::bandit_test::GetJointPropertiesResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::bandit_test::GetJointPropertiesResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::bandit_test::GetJointPropertiesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0c25f183097b8252c21f38f5c683688a";
  }

  static const char* value(const  ::bandit_test::GetJointPropertiesResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0c25f183097b8252ULL;
  static const uint64_t static_value2 = 0xc21f38f5c683688aULL;
};

template<class ContainerAllocator>
struct DataType< ::bandit_test::GetJointPropertiesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bandit_test/GetJointPropertiesResponse";
  }

  static const char* value(const  ::bandit_test::GetJointPropertiesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::bandit_test::GetJointPropertiesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string[] name\n\
int64[] id\n\
float64[] min\n\
float64[] max\n\
float64[] pos\n\
\n\
\n\
";
  }

  static const char* value(const  ::bandit_test::GetJointPropertiesResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::bandit_test::GetJointPropertiesRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetJointPropertiesRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::bandit_test::GetJointPropertiesResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.name);
    stream.next(m.id);
    stream.next(m.min);
    stream.next(m.max);
    stream.next(m.pos);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetJointPropertiesResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<bandit_test::GetJointProperties> {
  static const char* value() 
  {
    return "0c25f183097b8252c21f38f5c683688a";
  }

  static const char* value(const bandit_test::GetJointProperties&) { return value(); } 
};

template<>
struct DataType<bandit_test::GetJointProperties> {
  static const char* value() 
  {
    return "bandit_test/GetJointProperties";
  }

  static const char* value(const bandit_test::GetJointProperties&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<bandit_test::GetJointPropertiesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0c25f183097b8252c21f38f5c683688a";
  }

  static const char* value(const bandit_test::GetJointPropertiesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<bandit_test::GetJointPropertiesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bandit_test/GetJointProperties";
  }

  static const char* value(const bandit_test::GetJointPropertiesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<bandit_test::GetJointPropertiesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0c25f183097b8252c21f38f5c683688a";
  }

  static const char* value(const bandit_test::GetJointPropertiesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<bandit_test::GetJointPropertiesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bandit_test/GetJointProperties";
  }

  static const char* value(const bandit_test::GetJointPropertiesResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // BANDIT_TEST_SERVICE_GETJOINTPROPERTIES_H

