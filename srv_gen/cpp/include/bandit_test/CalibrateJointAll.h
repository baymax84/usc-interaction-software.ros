/* Auto-generated by genmsg_cpp for file /home/prashanth/groovy_workspace/sandbox/bandit_test/srv/CalibrateJointAll.srv */
#ifndef BANDIT_TEST_SERVICE_CALIBRATEJOINTALL_H
#define BANDIT_TEST_SERVICE_CALIBRATEJOINTALL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace bandit_test
{
template <class ContainerAllocator>
struct CalibrateJointAllRequest_ {
  typedef CalibrateJointAllRequest_<ContainerAllocator> Type;

  CalibrateJointAllRequest_()
  : Engage(0)
  {
  }

  CalibrateJointAllRequest_(const ContainerAllocator& _alloc)
  : Engage(0)
  {
  }

  typedef int8_t _Engage_type;
  int8_t Engage;


  typedef boost::shared_ptr< ::bandit_test::CalibrateJointAllRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bandit_test::CalibrateJointAllRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CalibrateJointAllRequest
typedef  ::bandit_test::CalibrateJointAllRequest_<std::allocator<void> > CalibrateJointAllRequest;

typedef boost::shared_ptr< ::bandit_test::CalibrateJointAllRequest> CalibrateJointAllRequestPtr;
typedef boost::shared_ptr< ::bandit_test::CalibrateJointAllRequest const> CalibrateJointAllRequestConstPtr;


template <class ContainerAllocator>
struct CalibrateJointAllResponse_ {
  typedef CalibrateJointAllResponse_<ContainerAllocator> Type;

  CalibrateJointAllResponse_()
  : MinAngle()
  , MaxAngle()
  {
  }

  CalibrateJointAllResponse_(const ContainerAllocator& _alloc)
  : MinAngle(_alloc)
  , MaxAngle(_alloc)
  {
  }

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _MinAngle_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  MinAngle;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _MaxAngle_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  MaxAngle;


  typedef boost::shared_ptr< ::bandit_test::CalibrateJointAllResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bandit_test::CalibrateJointAllResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CalibrateJointAllResponse
typedef  ::bandit_test::CalibrateJointAllResponse_<std::allocator<void> > CalibrateJointAllResponse;

typedef boost::shared_ptr< ::bandit_test::CalibrateJointAllResponse> CalibrateJointAllResponsePtr;
typedef boost::shared_ptr< ::bandit_test::CalibrateJointAllResponse const> CalibrateJointAllResponseConstPtr;

struct CalibrateJointAll
{

typedef CalibrateJointAllRequest Request;
typedef CalibrateJointAllResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct CalibrateJointAll
} // namespace bandit_test

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::bandit_test::CalibrateJointAllRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::bandit_test::CalibrateJointAllRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::bandit_test::CalibrateJointAllRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "835452ff0353af39da9f3c3654a9bd1d";
  }

  static const char* value(const  ::bandit_test::CalibrateJointAllRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x835452ff0353af39ULL;
  static const uint64_t static_value2 = 0xda9f3c3654a9bd1dULL;
};

template<class ContainerAllocator>
struct DataType< ::bandit_test::CalibrateJointAllRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bandit_test/CalibrateJointAllRequest";
  }

  static const char* value(const  ::bandit_test::CalibrateJointAllRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::bandit_test::CalibrateJointAllRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 Engage\n\
\n\
";
  }

  static const char* value(const  ::bandit_test::CalibrateJointAllRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::bandit_test::CalibrateJointAllRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::bandit_test::CalibrateJointAllResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::bandit_test::CalibrateJointAllResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::bandit_test::CalibrateJointAllResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "109947a542f972d101a3b6a95ff564de";
  }

  static const char* value(const  ::bandit_test::CalibrateJointAllResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x109947a542f972d1ULL;
  static const uint64_t static_value2 = 0x01a3b6a95ff564deULL;
};

template<class ContainerAllocator>
struct DataType< ::bandit_test::CalibrateJointAllResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bandit_test/CalibrateJointAllResponse";
  }

  static const char* value(const  ::bandit_test::CalibrateJointAllResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::bandit_test::CalibrateJointAllResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32[] MinAngle\n\
float32[] MaxAngle\n\
\n\
\n\
";
  }

  static const char* value(const  ::bandit_test::CalibrateJointAllResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::bandit_test::CalibrateJointAllRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.Engage);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CalibrateJointAllRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::bandit_test::CalibrateJointAllResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.MinAngle);
    stream.next(m.MaxAngle);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CalibrateJointAllResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<bandit_test::CalibrateJointAll> {
  static const char* value() 
  {
    return "ff2a3309264807cf529cf65a91bb03ee";
  }

  static const char* value(const bandit_test::CalibrateJointAll&) { return value(); } 
};

template<>
struct DataType<bandit_test::CalibrateJointAll> {
  static const char* value() 
  {
    return "bandit_test/CalibrateJointAll";
  }

  static const char* value(const bandit_test::CalibrateJointAll&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<bandit_test::CalibrateJointAllRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ff2a3309264807cf529cf65a91bb03ee";
  }

  static const char* value(const bandit_test::CalibrateJointAllRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<bandit_test::CalibrateJointAllRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bandit_test/CalibrateJointAll";
  }

  static const char* value(const bandit_test::CalibrateJointAllRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<bandit_test::CalibrateJointAllResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ff2a3309264807cf529cf65a91bb03ee";
  }

  static const char* value(const bandit_test::CalibrateJointAllResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<bandit_test::CalibrateJointAllResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bandit_test/CalibrateJointAll";
  }

  static const char* value(const bandit_test::CalibrateJointAllResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // BANDIT_TEST_SERVICE_CALIBRATEJOINTALL_H

