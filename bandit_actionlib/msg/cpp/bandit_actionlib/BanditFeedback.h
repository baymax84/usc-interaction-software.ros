/* auto-generated by genmsg_cpp from /home/kitty/ros/stacks/interaction-ros-pkg/bandit/bandit_actionlib/msg/BanditFeedback.msg.  Do not edit! */
#ifndef BANDIT_ACTIONLIB_BANDITFEEDBACK_H
#define BANDIT_ACTIONLIB_BANDITFEEDBACK_H

#include <string>
#include <vector>
#include "ros/message.h"
#include "ros/debug.h"
#include "ros/assert.h"
#include "ros/time.h"

namespace bandit_actionlib
{

//! \htmlinclude BanditFeedback.msg.html

class BanditFeedback : public ros::Message
{
public:
  typedef boost::shared_ptr<BanditFeedback> Ptr;
  typedef boost::shared_ptr<BanditFeedback const> ConstPtr;

  typedef int32_t _progress_time_type;
  typedef std::vector<float> _progress_joint_id_type;
  typedef std::vector<float> _progress_joint_angle_type;

  int32_t progress_time;
  std::vector<float> progress_joint_id;
  std::vector<float> progress_joint_angle;

  BanditFeedback() : ros::Message(),
    progress_time(0)
  {
  }
  BanditFeedback(const BanditFeedback &copy) : ros::Message(),
    progress_time(copy.progress_time)
  {
    (void)copy;
    progress_joint_id = copy.progress_joint_id;
    progress_joint_angle = copy.progress_joint_angle;
  }
  BanditFeedback &operator =(const BanditFeedback &copy)
  {
    if (this == &copy)
      return *this;
    progress_joint_id.clear();
    progress_joint_angle.clear();
    progress_time = copy.progress_time;
    progress_joint_id = copy.progress_joint_id;
    progress_joint_angle = copy.progress_joint_angle;
    return *this;
  }
  virtual ~BanditFeedback() 
  {
    progress_joint_id.clear();
    progress_joint_angle.clear();
  }
  inline static std::string __s_getDataType() { return std::string("bandit_actionlib/BanditFeedback"); }
  inline static std::string __s_getMD5Sum() { return std::string("46908837ea437c10fe685255470299e1"); }
  inline static std::string __s_getMessageDefinition()
  {
    return std::string(
    "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
    "#feedback\n"
    "int32 progress_time\n"
    "float32[] progress_joint_id\n"
    "float32[] progress_joint_angle\n"
    "\n"
    "\n"
    "\n"
    );
  }
  inline virtual const std::string __getDataType() const { return __s_getDataType(); }
  inline virtual const std::string __getMD5Sum() const { return __s_getMD5Sum(); }
  inline virtual const std::string __getMessageDefinition() const { return __s_getMessageDefinition(); }
  void set_progress_joint_id_size(uint32_t __ros_new_size)
  {
    this->progress_joint_id.resize(__ros_new_size);
  }
  inline uint32_t get_progress_joint_id_size() const { return progress_joint_id.size(); }
  inline void get_progress_joint_id_vec (std::vector<float> &__ros_vec) const
  {
    __ros_vec = this->progress_joint_id;
  }
  inline void set_progress_joint_id_vec(const std::vector<float> &__ros_vec)
  {
    this->progress_joint_id = __ros_vec;
  }
  void set_progress_joint_angle_size(uint32_t __ros_new_size)
  {
    this->progress_joint_angle.resize(__ros_new_size);
  }
  inline uint32_t get_progress_joint_angle_size() const { return progress_joint_angle.size(); }
  inline void get_progress_joint_angle_vec (std::vector<float> &__ros_vec) const
  {
    __ros_vec = this->progress_joint_angle;
  }
  inline void set_progress_joint_angle_vec(const std::vector<float> &__ros_vec)
  {
    this->progress_joint_angle = __ros_vec;
  }
  inline uint32_t serializationLength() const
  {
    unsigned __l = 0;
    __l += 4; // progress_time
    __l += 4 + (progress_joint_id.size() ? progress_joint_id.size() * 4 : 0); // progress_joint_id
    __l += 4 + (progress_joint_angle.size() ? progress_joint_angle.size() * 4 : 0); // progress_joint_angle
    return __l;
  }
  virtual uint8_t *serialize(uint8_t *write_ptr,
#if defined(__GNUC__)
                             __attribute__((unused)) uint32_t seq) const
#else
                             uint32_t seq) const
#endif
  {
    SROS_SERIALIZE_PRIMITIVE(write_ptr, progress_time);
    uint32_t __progress_joint_id_size = progress_joint_id.size();
    SROS_SERIALIZE_PRIMITIVE(write_ptr, __progress_joint_id_size);
    memcpy(write_ptr, &progress_joint_id[0], sizeof(float) * __progress_joint_id_size);
    write_ptr += sizeof(float) * __progress_joint_id_size;
    uint32_t __progress_joint_angle_size = progress_joint_angle.size();
    SROS_SERIALIZE_PRIMITIVE(write_ptr, __progress_joint_angle_size);
    memcpy(write_ptr, &progress_joint_angle[0], sizeof(float) * __progress_joint_angle_size);
    write_ptr += sizeof(float) * __progress_joint_angle_size;
    return write_ptr;
  }
  virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, progress_time);
    uint32_t __progress_joint_id_size;
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, __progress_joint_id_size);
    set_progress_joint_id_size(__progress_joint_id_size);
    memcpy(&progress_joint_id[0], read_ptr, sizeof(float) * __progress_joint_id_size);
    read_ptr += sizeof(float) * __progress_joint_id_size;
    uint32_t __progress_joint_angle_size;
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, __progress_joint_angle_size);
    set_progress_joint_angle_size(__progress_joint_angle_size);
    memcpy(&progress_joint_angle[0], read_ptr, sizeof(float) * __progress_joint_angle_size);
    read_ptr += sizeof(float) * __progress_joint_angle_size;
    return read_ptr;
  }
};

typedef boost::shared_ptr<BanditFeedback> BanditFeedbackPtr;
typedef boost::shared_ptr<BanditFeedback const> BanditFeedbackConstPtr;


}

#endif
