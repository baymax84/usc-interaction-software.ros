/* auto-generated by genmsg_cpp from /home/kitty/ros/stacks/interaction-ros-pkg/bandit/bandit_actionlib/msg/BanditResult.msg.  Do not edit! */
#ifndef BANDIT_ACTIONLIB_BANDITRESULT_H
#define BANDIT_ACTIONLIB_BANDITRESULT_H

#include <string>
#include <vector>
#include "ros/message.h"
#include "ros/debug.h"
#include "ros/assert.h"
#include "ros/time.h"

namespace bandit_actionlib
{

//! \htmlinclude BanditResult.msg.html

class BanditResult : public ros::Message
{
public:
  typedef boost::shared_ptr<BanditResult> Ptr;
  typedef boost::shared_ptr<BanditResult const> ConstPtr;

  typedef float _total_time_type;
  typedef std::vector<float> _result_joint_id_type;
  typedef std::vector<float> _result_joint_angle_type;

  float total_time;
  std::vector<float> result_joint_id;
  std::vector<float> result_joint_angle;

  BanditResult() : ros::Message(),
    total_time(0)
  {
  }
  BanditResult(const BanditResult &copy) : ros::Message(),
    total_time(copy.total_time)
  {
    (void)copy;
    result_joint_id = copy.result_joint_id;
    result_joint_angle = copy.result_joint_angle;
  }
  BanditResult &operator =(const BanditResult &copy)
  {
    if (this == &copy)
      return *this;
    result_joint_id.clear();
    result_joint_angle.clear();
    total_time = copy.total_time;
    result_joint_id = copy.result_joint_id;
    result_joint_angle = copy.result_joint_angle;
    return *this;
  }
  virtual ~BanditResult() 
  {
    result_joint_id.clear();
    result_joint_angle.clear();
  }
  inline static std::string __s_getDataType() { return std::string("bandit_actionlib/BanditResult"); }
  inline static std::string __s_getMD5Sum() { return std::string("ca0b05458f80aabcf6c8060af4e965cf"); }
  inline static std::string __s_getMessageDefinition()
  {
    return std::string(
    "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
    "#result definition\n"
    "float32 total_time\n"
    "float32[] result_joint_id\n"
    "float32[] result_joint_angle\n"
    "\n"
    "\n"
    );
  }
  inline virtual const std::string __getDataType() const { return __s_getDataType(); }
  inline virtual const std::string __getMD5Sum() const { return __s_getMD5Sum(); }
  inline virtual const std::string __getMessageDefinition() const { return __s_getMessageDefinition(); }
  void set_result_joint_id_size(uint32_t __ros_new_size)
  {
    this->result_joint_id.resize(__ros_new_size);
  }
  inline uint32_t get_result_joint_id_size() const { return result_joint_id.size(); }
  inline void get_result_joint_id_vec (std::vector<float> &__ros_vec) const
  {
    __ros_vec = this->result_joint_id;
  }
  inline void set_result_joint_id_vec(const std::vector<float> &__ros_vec)
  {
    this->result_joint_id = __ros_vec;
  }
  void set_result_joint_angle_size(uint32_t __ros_new_size)
  {
    this->result_joint_angle.resize(__ros_new_size);
  }
  inline uint32_t get_result_joint_angle_size() const { return result_joint_angle.size(); }
  inline void get_result_joint_angle_vec (std::vector<float> &__ros_vec) const
  {
    __ros_vec = this->result_joint_angle;
  }
  inline void set_result_joint_angle_vec(const std::vector<float> &__ros_vec)
  {
    this->result_joint_angle = __ros_vec;
  }
  inline uint32_t serializationLength() const
  {
    unsigned __l = 0;
    __l += 4; // total_time
    __l += 4 + (result_joint_id.size() ? result_joint_id.size() * 4 : 0); // result_joint_id
    __l += 4 + (result_joint_angle.size() ? result_joint_angle.size() * 4 : 0); // result_joint_angle
    return __l;
  }
  virtual uint8_t *serialize(uint8_t *write_ptr,
#if defined(__GNUC__)
                             __attribute__((unused)) uint32_t seq) const
#else
                             uint32_t seq) const
#endif
  {
    SROS_SERIALIZE_PRIMITIVE(write_ptr, total_time);
    uint32_t __result_joint_id_size = result_joint_id.size();
    SROS_SERIALIZE_PRIMITIVE(write_ptr, __result_joint_id_size);
    memcpy(write_ptr, &result_joint_id[0], sizeof(float) * __result_joint_id_size);
    write_ptr += sizeof(float) * __result_joint_id_size;
    uint32_t __result_joint_angle_size = result_joint_angle.size();
    SROS_SERIALIZE_PRIMITIVE(write_ptr, __result_joint_angle_size);
    memcpy(write_ptr, &result_joint_angle[0], sizeof(float) * __result_joint_angle_size);
    write_ptr += sizeof(float) * __result_joint_angle_size;
    return write_ptr;
  }
  virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, total_time);
    uint32_t __result_joint_id_size;
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, __result_joint_id_size);
    set_result_joint_id_size(__result_joint_id_size);
    memcpy(&result_joint_id[0], read_ptr, sizeof(float) * __result_joint_id_size);
    read_ptr += sizeof(float) * __result_joint_id_size;
    uint32_t __result_joint_angle_size;
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, __result_joint_angle_size);
    set_result_joint_angle_size(__result_joint_angle_size);
    memcpy(&result_joint_angle[0], read_ptr, sizeof(float) * __result_joint_angle_size);
    read_ptr += sizeof(float) * __result_joint_angle_size;
    return read_ptr;
  }
};

typedef boost::shared_ptr<BanditResult> BanditResultPtr;
typedef boost::shared_ptr<BanditResult const> BanditResultConstPtr;


}

#endif
