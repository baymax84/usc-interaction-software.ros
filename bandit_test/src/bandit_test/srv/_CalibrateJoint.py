"""autogenerated by genpy from bandit_test/CalibrateJointRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CalibrateJointRequest(genpy.Message):
  _md5sum = "ab613ebb5bc21b6e6a25775f49372cb6"
  _type = "bandit_test/CalibrateJointRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 Id
float32 Angle_Increment

"""
  __slots__ = ['Id','Angle_Increment']
  _slot_types = ['int8','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Id,Angle_Increment

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CalibrateJointRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Id is None:
        self.Id = 0
      if self.Angle_Increment is None:
        self.Angle_Increment = 0.
    else:
      self.Id = 0
      self.Angle_Increment = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_bf.pack(_x.Id, _x.Angle_Increment))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.Id, _x.Angle_Increment,) = _struct_bf.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_bf.pack(_x.Id, _x.Angle_Increment))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.Id, _x.Angle_Increment,) = _struct_bf.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_bf = struct.Struct("<bf")
"""autogenerated by genpy from bandit_test/CalibrateJointResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CalibrateJointResponse(genpy.Message):
  _md5sum = "1afab86ec712e500fcb247c9c59b21b6"
  _type = "bandit_test/CalibrateJointResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 MinAngle
float32 MaxAngle


"""
  __slots__ = ['MinAngle','MaxAngle']
  _slot_types = ['float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       MinAngle,MaxAngle

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CalibrateJointResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.MinAngle is None:
        self.MinAngle = 0.
      if self.MaxAngle is None:
        self.MaxAngle = 0.
    else:
      self.MinAngle = 0.
      self.MaxAngle = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2f.pack(_x.MinAngle, _x.MaxAngle))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.MinAngle, _x.MaxAngle,) = _struct_2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2f.pack(_x.MinAngle, _x.MaxAngle))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.MinAngle, _x.MaxAngle,) = _struct_2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2f = struct.Struct("<2f")
class CalibrateJoint(object):
  _type          = 'bandit_test/CalibrateJoint'
  _md5sum = 'af39ef32ac479ea8af80ed53c7ea98fe'
  _request_class  = CalibrateJointRequest
  _response_class = CalibrateJointResponse
