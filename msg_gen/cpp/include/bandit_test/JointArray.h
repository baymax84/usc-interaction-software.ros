/* Auto-generated by genmsg_cpp for file /home/prashanth/groovy_workspace/sandbox/bandit_test/msg/JointArray.msg */
#ifndef BANDIT_TEST_MESSAGE_JOINTARRAY_H
#define BANDIT_TEST_MESSAGE_JOINTARRAY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "bandit_test/Joint.h"

namespace bandit_test
{
template <class ContainerAllocator>
struct JointArray_ {
  typedef JointArray_<ContainerAllocator> Type;

  JointArray_()
  : joints()
  {
  }

  JointArray_(const ContainerAllocator& _alloc)
  : joints(_alloc)
  {
  }

  typedef std::vector< ::bandit_test::Joint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::bandit_test::Joint_<ContainerAllocator> >::other >  _joints_type;
  std::vector< ::bandit_test::Joint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::bandit_test::Joint_<ContainerAllocator> >::other >  joints;


  typedef boost::shared_ptr< ::bandit_test::JointArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bandit_test::JointArray_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct JointArray
typedef  ::bandit_test::JointArray_<std::allocator<void> > JointArray;

typedef boost::shared_ptr< ::bandit_test::JointArray> JointArrayPtr;
typedef boost::shared_ptr< ::bandit_test::JointArray const> JointArrayConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::bandit_test::JointArray_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::bandit_test::JointArray_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace bandit_test

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::bandit_test::JointArray_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::bandit_test::JointArray_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::bandit_test::JointArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "423aa2d3501bad91e36a6fd038eaee64";
  }

  static const char* value(const  ::bandit_test::JointArray_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x423aa2d3501bad91ULL;
  static const uint64_t static_value2 = 0xe36a6fd038eaee64ULL;
};

template<class ContainerAllocator>
struct DataType< ::bandit_test::JointArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bandit_test/JointArray";
  }

  static const char* value(const  ::bandit_test::JointArray_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::bandit_test::JointArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Joint[] joints \n\
================================================================================\n\
MSG: bandit_test/Joint\n\
uint32 id\n\
float64 angle\n\
";
  }

  static const char* value(const  ::bandit_test::JointArray_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::bandit_test::JointArray_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.joints);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct JointArray_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bandit_test::JointArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::bandit_test::JointArray_<ContainerAllocator> & v) 
  {
    s << indent << "joints[]" << std::endl;
    for (size_t i = 0; i < v.joints.size(); ++i)
    {
      s << indent << "  joints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::bandit_test::Joint_<ContainerAllocator> >::stream(s, indent + "    ", v.joints[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // BANDIT_TEST_MESSAGE_JOINTARRAY_H

